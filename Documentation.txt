--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Milestone1

Risk Model:
  The important objects(Player, Country, Continent) are stored in arraylists since they are the easiest to iterate through
1.Constructor:
  Initiates the players, countries and continents list and also the parser object. Also initiates the createMap method in order to construct the game map.
  The constructor also starts the newGame method to determine the amount of players and the player names and the play method to start the game.
  
2. createMap:
  It starts by initiating every country object in the game, since in order to add adjacent countries all countries must be initiated.
  Then proceeds to set all the adjacent countries. A list is used to be able to add all the adjacent countries as an arrayList into the the addAdjacentCountries method of
 Country at once. Then all continents are created and all the countries are added to them. At the same time the countries added to the continents are also added to the main
 arrayList containing all the countries in the game.
  
3. newGame: Starts by prompting the user for the amount of players playing. It is in a while loop that only ends when a valid number is selected. After player count is
selected it then sets the initial army size. That is selected by using a switch statement. if the case is 2 the initial army size if 50. The default case is 50 -5 times
the input to determine the starting army size. Then it prompts for the names of the players. This will not accept blank names and will ask again if blank. Its next objective
is to randomly assign all the countries in the game. It makes a new arrayList that is equal to the countries list and then uses the method shuffle on the list. Then it is added
to a stack. newGame proceeds to iterate through each player and pop the stack each time until the stack is empty. at the same time each countries
the initial army is set to one. Then it iterates through each player and assigns the rest of the player's army until the entire army is allocated. This is done again by shuffling
an ArrayList that contains all the owned countries of the player.

4.Player was designed to have the information about the player's owned countries and continenents. A useful data structure that was used was a hashmap of String, country/Continent
because we wanted a fast data structure that could mimic a graph as well as be efficient. Since Hashmaps have O(1) put and get methods.

5. The attack method in RiskModel was made to represent the attack phase in risk. The use of random numbers were needed to represent dice rolls and found that we could use two different methods.
threadLocalRandom.current().nextINT or (int)Math.random() were the options. Since we were using a single thread application (int)Math.random() is faster to generate random numbers.
Once the dice rolls were made, then the array of dice rolls had to be sorted in descending order to be compared. This was used by Arrays.Sort() which used an implementation Collections.reverseOrder(),
which is used to sort the array in desc order.

6. The RiskModel is a combination of Model and Controller in the MVC pattern this was useful for references, but in the future the decoupling of these two functionalities will be made.

Command Parser:
    The main CommandParser class does all the interacting with the user and converts their input from a string to a format the rest of the code can understand.
    The Command object is the data type used to pass information from the parser to the RiskModel. It contains an enum for the command type. This was done to
    ensure incorrect command types could not be entered. It also passes two country objects and a number of troops. This is enough information to perform any
    of the main game functions.

    The parser gets called from the RiskModel whenever a user input is needed, and when there is a message to display to the user. Each query from the model has a method in the parser.
    This was done to keep the main code concise.

    The parser has 3 main components:
        Input conversion
        Information display
        Command parsing

    Input Conversion:
        The user input is taken as a string. They enter keywords to specify the action they want to do, and write the names of countries when relevant. This was done as opposed to
        entering a number for each country because it would make for a better user experience. The main input conversion happens in the getInput method.

        The first step in the input conversion is splitting the input into individual words. This is done by scanning the user input, making it all lowercase, then using the String.split
        method. It was made lowercase so that things would not be case sensitive which makes things simpler. The user input is an array of Strings at this point, where each element is a
        word. The next step is combining the elements of multi-word country names (East Africa, United States, etc) into a single element. This is done by making a list of all the countries
        that have names longer than one word and seeing if any word in the users input is contained in that list. The final step in input conversion is done in the getInput method. The
        other words are checked and the output is returned as a Command object. I can not understate how much of a pain this was to implement.

    Information Display:
        The user can request information. This is all handled in the command parser because the main code would get cluttered if it had to check all the inputs and keep querying the
        parser. It might be better to have a separate class called Controller or something that handled this instead, but oh well. The parser contains a list of countries and prints
        the information in a nice way when needed.

    Command Parsing:
        The command code is checked in the Deploy, Fortify, and Attack methods. This is done because some commands are allowed during certain phases while others are not. Each phase's
        function checks to see if the command is valid and can be returned to the risk model, or if its invalid or requires information to be displayed.
        
        
        
   ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
   Milestone2
   
   To make our code work, we have refactored our arrayLists back to arrays. It was to give some members better support.
   We also have a few design to figure out. We know our classes don't have good cohesion, therefore, we will refine our design in the next iteration. 
   The gui took a lot of effort and caused us to take the quickest path to a solution vs an informed one.
    
   
   RiskModel:
       All events in the RiskModel are controlled by an ActionContext. This class is a transactional/state representation of what phase/action needs to be performed.
   
   1.Constructor:
                Calls the newGameUser method which is used to initialize the game's View, Controller and ActionContext
                
   2.newGameStart:
           We decided to implement milestone4s import function and we now import a map and json data about the map with a map importer
           Once the map is imported, it then creates a RiskController that is put in the RiskView Constructor. This ensures that the model is connected to the view and the                  controller is connected to the view.
           
   3. newGameCreator:
            This is the old random game maker. It has been updated to assign players with a color. 
            
   4.menuSkip:
         this method is to handle a skip action made by the user, based on the current ActionContext. 
         
   5.menuConfirm:
         this method is to handle a confirm action made by the user, based on the current ActionContext. 
         
   6.menuBack:
         this method is to handle a back action made by the user, based on the current ActionContext. 
         
   7. updateView()
            this is the method to send the actionContext to the view. It is called when an action is performed in the model and the state changes.
            Data is also passed within the ActionContext, which represents the game states.
         
   RiskView:
        RiskView is a GUI based class that extends JFrame and Implements ActionLister
        It is driven by MouseClick events and ButtonClick.
        The MouseClicks are used only on the map to get a position to send to the controller.
        These MouseClicks are to represent if you clicked a country's hitbox. 
          
          
   Phase:
        This was our enumeration class that represents the different states and actions that are invovled in the game of risk.
        Each phase provides control flow to the view and the model. 
          
          
          
  RiskController:
         This class implements actionListener and holds three methods
         
         
         1: actionPerformed: 
                  actionPerformed is used as the listener for all the buttons. This lets us use the controller class to determine the control flow of buttons.
                  
         2: countrySelected:
                  This method is called when you click on the map on view. It is used to get the x,y coordinate from the map and send that to the model. The model will then
                  check if those coordinates are a country and then update the ActionContext and update the view.
                  
         3. IsInt:
                A helper function to determine if a String has an integer in it. This is used when selecting number of troops from the view.
          
          
          
  MapImport:
       This class is used to unpack our choice of data. We used a JSON file to represent each countries: name, adjacenies, hitbox/position and rank.
       Also a PNG file is used as our game image to show on the view. 
       
       This class uses an external library called com.google.gson to parse the JSON file.
       
       
  ActionContext:
           This is our transactional/state model. Our whole game runs off what state the ActionContext holds. 
           It was a second iteration from milestone1. It has grown to be help minimize what data needs to be shared to the view.
           
           ActionContext also is manipulated by different methods based on the current enum Phase. This is to control the flow of action.
          
          
 UML: 
    The uml has changed based on some TA feedback. We have added aggregation relationships as well as the implemented/extended class.
    
    
Sequence Diagram:
     I tried to be as close to what methods were called as possible. I also made the of what the ActionContext looks like for what action
   
   
   -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
