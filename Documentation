
Risk Model:
  The important objects(Player, Country, Continent) are stored in arraylists since they are the easiest to iterate through
1.Constructor:
  Initiates the players, countries and continents list and also the parser object. Also intitates the createMap method in order to construct the game map.
  The constructor also starts the newGame method to determine amount of players and the player names and the play method to start the game.
  
2. createMap:
  It starts by initiating every country object in the game, since in order to add adjacent countries all countries must be initiated.
  Then proceeds to set all the adjacent countries. A list is used to be able to add all the adjacent countries as an arrayList into the the addAdjacentCountries method at once.
  Then all continents are added
  
Command Parser:
    The main CommandParser class does all the interacting with the user and converts their input from a string to a format the rest of the code can understand.
    The Command object is the data type used to pass information from the parser to the RiskModel. It contains an enum for the command type. This was done to
    ensure incorrect command types could not be entered. It also passes two country objects and a number of troops. This is enough information to perform any
    of the main game functions.

    The parser gets called from the RiskModel whenever a user input is needed, and when there is a message to display to the user. Each query from the model has a method in the parser.
    This was done to keep the main code concise.

    The parser has 3 main components:
        Input conversion
        Information display
        Command parsing

    Input Conversion:
        The user input is taken as a string. They enter keywords to specify the action they want to do, and write the names of countries when relevant. This was done as opposed to
        entering a number for each country because it would make for a better user experience. The main input conversion happens in the getInput method.

        The first step in the input conversion is splitting the input into individual words. This is done by scanning the user input, making it all lowercase, then using the String.split
        method. It was made lowercase so that things would not be case sensitive which makes things simpler. The user input is an array of Strings at this point, where each element is a
        word. The next step is combining the elements of multi-word country names (East Africa, United States, etc) into a single element. This is done by making a list of all the countries
        that have names longer than one word and seeing if any word in the users input is contained in that list. The final step in input conversion is done in the getInput method. The
        other words are checked and the output is returned as a Command object. I can not understate how much of a pain this was to implement.

    Information Display:
        The user can request information. This is all handled in the command parser because the main code would get cluttered if it had to check all the inputs and keep querying the
        parser. It might be better to have a separate class called Controller or something that handled this instead, but oh well. The parser contains a list of countries and prints
        the information in a nice way when needed.

    Command Parsing:
        The command code is checked in the Deploy, Fortify, and Attack methods. This is done because some commands are allowed during certain phases while others are not. Each phase's
        function checks to see if the command is valid and can be returned to the risk model, or if its invalid or requires information to be displayed.